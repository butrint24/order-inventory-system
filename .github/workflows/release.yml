name: Release

on:
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Fetch all tags
      run: |
        git fetch --tags

    - name: Get the latest tag
      id: get_latest_tag
      run: |
        TAG=$(git tag --sort=-v:refname | head -n 1 || echo "v0.0.0")
        echo "LATEST_TAG=$TAG" >> $GITHUB_ENV

    - name: Determine next version
      id: determine_version
      run: |
        # Extract the current version
        VERSION=${LATEST_TAG#v}
        if [ -z "$VERSION" ]; then
          VERSION="0.0.0"
        fi
        IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
        
        # Default version parts
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        
        # Determine increment based on commit message
        if git log -1 --pretty=%B | grep -q '^feat:'; then
          MAJOR=$((MAJOR + 1))
          MINOR=0
          PATCH=0
        elif git log -1 --pretty=%B | grep -q '^fix:'; then
          MINOR=$((MINOR + 1))
          PATCH=0
        elif git log -1 --pretty=%B | grep -q '^chore:'; then
          PATCH=$((PATCH + 1))
        fi

        NEXT_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
        echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV

    - name: Get commit messages
      id: get_commit_messages
      run: |
        COMMITS=$(git log --pretty=format:"%s" $LATEST_TAG..HEAD)
        echo "COMMIT_MESSAGES=$COMMITS" >> $GITHUB_ENV

    - name: Format commit messages
      id: format_commit_messages
      run: |
        FEATURE_COMMITS=$(echo "${{ env.COMMIT_MESSAGES }}" | grep '^feat:' | sed 's/^feat: //' | paste -sd ", " -)
        FIX_COMMITS=$(echo "${{ env.COMMIT_MESSAGES }}" | grep '^fix:' | sed 's/^fix: //' | paste -sd ", " -)
        CHORE_COMMITS=$(echo "${{ env.COMMIT_MESSAGES }}" | grep '^chore:' | sed 's/^chore: //' | paste -sd ", " -)

        FORMATTED_BODY=""

        if [ -n "$FEATURE_COMMITS" ]; then
          FORMATTED_BODY+="**Feature**" \n
          FORMATTED_BODY+="${FEATURE_COMMITS}"
        fi

        if [ -n "$FIX_COMMITS" ]; then
          FORMATTED_BODY+="**Fix** \n
          FORMATTED_BODY+="${FIX_COMMITS}"
        fi

        if [ -n "$CHORE_COMMITS" ]; then
          FORMATTED_BODY+="**Chore**" \n
          FORMATTED_BODY+="${CHORE_COMMITS}"
        fi

        echo "FORMATTED_BODY=$FORMATTED_BODY" >> $GITHUB_ENV

    - name: Debug Information
      run: |
        echo "LATEST_TAG=${{ env.LATEST_TAG }}"
        echo "NEXT_VERSION=${{ env.NEXT_VERSION }}"
        echo "FORMATTED_BODY=${{ env.FORMATTED_BODY }}"

    - name: Create tag and release
      uses: actions/create-release@v1.1.0
      with:
        tag_name: ${{ env.NEXT_VERSION }}
        release_name: Release ${{ env.NEXT_VERSION }}
        body: |
          Auto-generated release for version ${{ env.NEXT_VERSION }}

          ${{ env.FORMATTED_BODY }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
